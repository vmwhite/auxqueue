library(AuxillaryQueue)
install.packages("available")
available("AuxillaryQueue")
available("AuxillaryQueue")
library(available)
available("AuxillaryQueue")
)
use_git()
library(devtools)
library(roxygen2)
use_r("quad")
load_all()
quad(1,1,1)
quad(2,1,1)
quad(2,-1,1)
quad(2,-1,-1)
devtools::load_all(".")
commit quad()
check()
use_gpl3_license()
document()
quad(2,-1,-3)
document
document()
git commit
diff --git a/R/quad.R
diff --git ~/R/quad.R
diff --git R/quad.R
diff --git quad.R
diff --git a/R/quad.R b/R/quad.R
use_r("calc_a_ij")
document()
load_all()
check()
calc_a_ij(1,2,.582,.588,.9656)
calc_a_ij(2,1,.582,.588,.9656)
calc_a_ij(4,1,.582,.588,.9656)
calc_a_ij(4,4,.582,.588,.9656)
calc_a_ij(1,4,.582,.588,.9656)
calc_a_ij(4,1,.582,.588,.9656)
load_all()
document()
document()
use_r("calc_b_ij")
library(devtools)
library(roxygen2)
use_r("calc_b_ij")
use_r("calc_mu_mn")
use_r("calc_alpha_i")
use_r("matrix_power")
use_r("Calc_Am")
use_r("Calc_A")
use_r("Calc_R")
use_r("Calc_B_mn")
use_r("Calc_X")
use_r("Calc_results")
use_r("Solve_K")
load_all()
load_all()
load_all()
document()
test()
use_testthat()
use_test()
use_test()
test()
check()
check()
load_all()
load_all()
c_p<- 25
c_aux <- 3
mu_p <- .582
mu_aux <- .588
p <- 0.9656
q <- 1-p
lambda <-  2.112375
lambda_aux <- q*lambda
lambda_p <-p*lambda
s<- c_aux
r <- c_p
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
traceback()
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
traceback()
j<- 1
(j-1)*mu_aux*q
(2-1)*mu_aux*q
load_all()
(2-1)*mu_aux*q
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
q
class(q)
class(mu_aux)
class(j)
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
load_all()
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
load_all()
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
trackback()
traceback()
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
traceback()
load_all()
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
devtools::load_all(".")
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,22)
available("hqueue")
library(available)
available("hqueue")
available("harcqueue")
