document()
quad(2,-1,-3)
document
document()
git commit
diff --git a/R/quad.R
diff --git ~/R/quad.R
diff --git R/quad.R
diff --git quad.R
diff --git a/R/quad.R b/R/quad.R
use_r("calc_a_ij")
document()
load_all()
check()
calc_a_ij(1,2,.582,.588,.9656)
calc_a_ij(2,1,.582,.588,.9656)
calc_a_ij(4,1,.582,.588,.9656)
calc_a_ij(4,4,.582,.588,.9656)
calc_a_ij(1,4,.582,.588,.9656)
calc_a_ij(4,1,.582,.588,.9656)
load_all()
document()
document()
use_r("calc_b_ij")
library(devtools)
library(roxygen2)
use_r("calc_b_ij")
use_r("calc_mu_mn")
use_r("calc_alpha_i")
use_r("matrix_power")
use_r("Calc_Am")
use_r("Calc_A")
use_r("Calc_R")
use_r("Calc_B_mn")
use_r("Calc_X")
use_r("Calc_results")
use_r("Solve_K")
load_all()
load_all()
load_all()
document()
test()
use_testthat()
use_test()
use_test()
test()
check()
check()
load_all()
load_all()
c_p<- 25
c_aux <- 3
mu_p <- .582
mu_aux <- .588
p <- 0.9656
q <- 1-p
lambda <-  2.112375
lambda_aux <- q*lambda
lambda_p <-p*lambda
s<- c_aux
r <- c_p
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
traceback()
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
traceback()
j<- 1
(j-1)*mu_aux*q
(2-1)*mu_aux*q
load_all()
(2-1)*mu_aux*q
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
q
class(q)
class(mu_aux)
class(j)
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
load_all()
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
load_all()
Calc_Am(23,s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p)
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
trackback()
traceback()
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
traceback()
load_all()
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,21)
devtools::load_all(".")
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,22)
available("hqueue")
library(available)
available("hqueue")
available("harcqueue")
Solve_K(s,r,lambda, lambda_aux,lambda_p,mu_p,mu_aux, p,22)
s_crisis <- 15
s_police <- 176
mu_police <- 0.582
mu_crisis <- 0.588
33.798
lambda <- 33.798
p<- .9656
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lam, p)
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
G
r
G_rows
G_cols
r+!
1
r+1
r
maxtrix_size
matrix_size
matrix_size*(r+1)
a_irow_icol_jrow_jcol
G <- matrix(0, nrow = (r + 1), ncol = (r + 1) )
n
n
n
G
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
G
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
G
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
g
G
N
n
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
G
e
G <- t(G)
e <- matrix(1, nrow = r, ncol=1)
matrix_size = K+1
X_r <- matrix(1, nrow = 1, ncol=matrix_size)
row_list <- c()
I <- diag(1,matrix_size)
a_Xr <- X_r %*% solve(I - R)
a_Xr
for (i in 1:((r + 1) * matrix_size)){
if (i <(((r * matrix_size)+1))){
row_list<- append(row_list, 1)
num <- 1
}else{
row_list<- append(row_list, a_Xr[num])
num <- num+1
}
}
a_Xr
row_list
num
r * matrix_size)+1
r * matrix_size+1
for (i in 1:((r + 1) * matrix_size)){
if (i <(((r * matrix_size)+1))){
row_list<- append(row_list, 1)
num <- 1
}else{
row_list<- append(row_list, a_Xr[num])
num <- num+1
}
}
row_list
a_Xr
num
num <- 1
row_list<- append(row_list, 1)
row_list
row_list <- c()
for (i in 1:((r + 1) * matrix_size)){
if (i <(((r * matrix_size)+1))){
row_list<- append(row_list, 1)
num <- 1
}else{
row_list<- append(row_list, a_Xr[num])
num <- num+1
}
}
num
row_list
X_r %*% solve(I - R)
X_r %*% solve(I - R) %*% e
e <- matrix(1, nrow = r, ncol=1)
X_r %*% solve(I - R) %*% e
X_r %*% solve(I - R) %*% e
solve(I - R) %*% e
e
solve(I - R)
X_r <- matrix(1, nrow = 1, ncol=matrix_size)
X_r
row_list
ncol(A)
ncol(G)
length(row_list)
row_length
row_list
length(row_list)
ncol(G)
nrow(G)
rbind(G,row_list)
new<- rbind(G,row_list)
new
length(new)
nrows(new)
n_row(new)
n_=row(new)
nrow(new)
ncol(new)
r * matrix_size)+1
r * matrix_size+1
(r + 1) * matrix_size
A_xR
a_Xr
row_list
row_list[3150:]
row_list[3186:]
row_list[3186]
G
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
matrix_size <- (K) + 1
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
devtools::load_all(".")
source("~/GitHub/auxqueue/R/trunc_G.R", echo=TRUE)
devtools::load_all(".")
devtools::load_all(".")
rlang::last_trace()
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
a_irow_icol_jrow_jcol <- array(c(aij), c(r+1, r+1, matrix_size, matrix_size))
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
N <- max(s+1, 11) # K > s
L_p_N_val <- 1
L_a_N_val <- 1
L_P_N_1 <- .0001
L_A_N_1 <-.0001
A <- Calc_Am(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
B <- Calc_Bmn(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
R <- Calc_R(A, N, s)
N <- max(s+1, 11) # K > s
N <- max(s_crisis+1, 11) # K > s
N <- N + 1
A <- Calc_Am(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
B <- Calc_Bmn(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
s<- s_crisis
A <- Calc_Am(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
r<- c_police
r<- s_police
A <- Calc_Am(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
lambda_p <- p*lambda
lambda_aux <- (1-p)*lambda
mu_p<- mu_police
mu_aux<- mu_crisis
A <- Calc_Am(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
B <- Calc_Bmn(N,s,r,lambda,lambda_aux,lambda_p,mu_p,mu_aux, p)
R <- Calc_R(A, N, s)
X <- Calc_X(N,s,r,A,B,R)
#Calculate the truncated r by r Generator matrix
G <- trunc_G(K,s,r, A,B,R)
K<- N
#Calculate the truncated r by r Generator matrix
G <- trunc_G(K,s,r, A,B,R)
#Calculate the truncated r by r Generator matrix
G <- trunc_G(K,s,r, A,B,R)
K<- N
#Calculate the truncated r by r Generator matrix
G <- trunc_G(K,s,r, A,B,R)
G
nrow(G)
ncol(G)
# Transpose matrix for solving for X
G <- t(G)
## append final equation
#x_0*e + x_1*e +.. x_r(I-R)^{-1}*e = 1
# e is the column vector with all its components equal to 1
e <- matrix(1, nrow = r, ncol=1)
matrix_size = K+1
# dummy x variable
X_r <- matrix(1, nrow = 1, ncol=matrix_size)
row_list <- c()
I <- diag(1,matrix_size)
a_Xr <- X_r %*% solve(I - R)
_xR
a_Xr
for (i in 1:((r + 1) * matrix_size)){
if (i <(((r * matrix_size)+1))){
row_list<- append(row_list, 1)
num <- 1
}else{
row_list<- append(row_list, a_Xr[num])
num <- num+1
}
}
row_list
nrow(row_list)
ncol(row_list)
new<- rbind(G,row_list)
new
nrow(new)
ncol(new)
b <- matrix(0, nrow=((r+1)*matrix_size),ncol=1)
b
nrow(b)
b <- rbind(b,1)
nrow(b)
# length(row_list) should == ncol(a)
G <- rbind(G,row_list)
length(row_list)
qr(as.numeric(factor(G)))
best_fit <- lsfit(G, b)
best_fit
qr_decomp <- qr(as.numeric(factor(G)))
Solved <- solve(G,b)
qr.solve(qr_decomp, b)
library(MASS)
ginv(A) %*% B
ginv(G) %*% b
X <- lsfit(G, b)
X
X$intercept
X$coefficients
sum(X$coefficients)
X <- ginv(G) %*% b
X
sum(X)
X <- qr.solve(qr(as.numeric(factor(G))), b)
t <- try(X <- qr.solve(qr(as.numeric(factor(G))), b))
t
t <- try(X <- qr.solve(qr(as.numeric(factor(G))), b))
if("try-error" %in% class(t)){
X <- lsfit(G, b)
#X <- ginv(G) %*% b ## takes longer
}
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
# Use QR decomposition to solve the system
t <- try(X <- qr.solve(qr(as.numeric(factor(G))), b))
if("try-error" %in% class(t)){
X <- lsfit(G, b)
#X <- ginv(G) %*% b ## takes longer
}
# add additional rows to X
X <- normalize_vector(X,matrix_size,R)
## reformat to x_ij
X_i <- matrix(0, nrow = nrow(X)/matrix_size, ncol=matrix_size)
count <- 1
X
devtools::load_all(".")
# Use QR decomposition to solve the system
t <- try(X <- qr.solve(qr(as.numeric(factor(G))), b))
if("try-error" %in% class(t)){
X <- lsfit(G, b)
X <- X$coefficients
#X <- ginv(G) %*% b ## takes longer
}
# add additional rows to X
X <- normalize_vector(X,matrix_size,R)
## reformat to x_ij
X_i <- matrix(0, nrow = nrow(X)/matrix_size, ncol=matrix_size)
X
type(X)
X.type()
nrow(X)
length(X)
max(length(X), nrow(X))
X[count]
X[1]
X[2]
X[3]
X[100]
source("~/GitHub/auxqueue/R/Calc_X.R", echo=TRUE)
s_police<- 50 s_crisis,mu_police, mu_crisis, lambda , p)
s_police<- 50
s_crisis <- 15
lambda<- 27.966
p <- 0.9656
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
time_limit
sum(vec)
vec
sum(vec)
sum(vec[1:100])
sum(vec[1:700])
sum(vec[1:100000000])
sum(vec[100000000])
sum(vec[1000000])
sum(vec[1000])
sum(vec[10000])
sum(vec[100000])
sum(vec[1000000])
sum(vec[100009])
sum(vec[100009], na.rm= TRUE)
devtools::load_all(".")
sum(
Run `rm(list = c("Calc_X")
Run `rm(list = c("Calc_X"))
Run `rm(list = c("Calc_X"))
)
()
Run `rm(list = c("Calc_X")
``
Run `rm(list = c("Calc_X"))`
rm(list = c("Calc_X"))
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
X_i <- na.omit(X_i)
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
L_a_N_val
L_p_N_val
c_aux*mu_aux
source("~/GitHub/auxqueue/R/Checks.R", echo=TRUE)
devtools::load_all(".")
rm(list = c("Checks"))
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
X
sum(X)
source("~/GitHub/auxqueue/R/Calc_X.R", echo=TRUE)
devtools::load_all(".")
AuxiliaryQueue::auxqueue(s_police, s_crisis,mu_police, mu_crisis, lambda , p)
r*mu_p
c_police*mu_p
s_police*mu_p
lambda*p
c_aux*mu_aux
s_aux*mu_aux
s_crisis*mu_crisis
lambda*(1-p)
(s_police - s_crisis)* mu_police + c_crisis*mu_crisis
(s_police - s_crisis)* mu_police + s_crisis*mu_crisis
27/29
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(70,5,  0.582, 0.618,46.61, 1-0.029,13)
results <- AuxiliaryQueue::auxqueue(176,3,  0.582, 0.588,41.052, 1-0.039,13)
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(176,3,  0.582, 0.588,41.052, 1-0.039,13)
results
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,99)
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,99)
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3)
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3)
qr_decomp
qr_decomp$qr
qr_decomp$qraux
qr_decomp$rank
qr.solve(qr_decomp$qr, b))
qr.solve(qr_decomp$qr, b)
nrows(b)
rows(b)
nrow(b)
nrow(qr_decomp$qr)
nrow(Q)
nrow(G)
qr(G
)
qr_decomp <- qr(G)
nrow(qr_decomp)
nrow(qr_decomp$qraux)
nrow(qr_decomp$qr)
qr.solve(qr_decomp$qr, b)
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3)
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3)
source("~/GitHub/auxqueue/R/Calc_B_mn.R", echo=TRUE)
source("~/GitHub/auxqueue/R/Calc_B_mn.R", echo=TRUE)
source("~/GitHub/auxqueue/R/Calc_B_mn.R", echo=TRUE)
qq
q
)
))))
devtools::load_all(".")
rm(list = c("Calc_Bmn"))
source("~/GitHub/auxqueue/R/Calc_B_mn.R", echo=TRUE)
source("~/GitHub/auxqueue/R/Calc_B_mn.R", echo=TRUE)
devtools::load_all(".")
rm(list = c("Calc_Bmn"))
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3)
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3)
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3,FALSE)
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(50,3,  0.582, 0.588,27.966, 1-0.039,3,FALSE)
results <- AuxiliaryQueue::auxqueue(50,2,  0.582, 0.588,27.966, 1-0.039,3,FALSE)
RESULTS
results
source("~/GitHub/auxqueue/R/Calc_results.R", echo=TRUE)
devtools::load_all(".")
rm(list = c("Calc_results"))
devtools::load_all(".")
results <- AuxiliaryQueue::auxqueue(50,2,  0.582, 0.588,27.966, 1-0.039,3,FALSE)
results
results <- AuxiliaryQueue::auxqueue(132,15,  0.55, 0.588,27.966, 0.9656,3,FALSE)
results <- AuxiliaryQueue::auxqueue(132,15,  0.55, 0.588,27.966, 0.9656,3+15,FALSE)
results <- AuxiliaryQueue::auxqueue(132,15,  0.582, 0.588,27.966, 0.9656,3+15,FALSE)
results <- AuxiliaryQueue::auxqueue(132,15,  0.582, 0.588,27.966, 0.9656,1+15,FALSE)
